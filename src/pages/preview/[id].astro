---
import Layout from "../../layouts/Layout.astro";
import { sanityClient } from "sanity:client";

const { id } = Astro.params;

const getItem = `*[_id == "${id}"][0]{
  "fileUrl": file.asset->url,
  title,
  documentType,
  files[]{
    ..., 
    "url": file.asset->url // Fix: properly query the file's URL
  },
  content,
  paragraphs
}`;
// const getItem = `*[_id == "${id}"][0]`;
const item = await sanityClient.fetch(getItem);

const fileUrl = item.fileUrl;
const title = item.title;
const documentType = item.documentType;
const files = item.files ? item.files : [];
const content = item.content;

console.log(item);
const paragraphs = item.paragraphs;
---

<Layout>
  <div class="p-6 font-[Geologica]">
    <h1 class="text-2xl font-bold mb-4">{title}</h1>
    {
      content && (
        <div class="text-gray-800">
          <p>{content}</p>
        </div>
      )
    }
    {
      documentType === "file" && fileUrl && (
        <>
          <iframe
            src={fileUrl}
            class="w-full h-screen border-2 border-gray-300"
            title={title}
          />
          <a
            href={fileUrl}
            download
            class="mt-4 inline-block text-blue-600 hover:underline"
          >
            Скачать файл
          </a>
        </>
      )
    }

    {
      documentType === "fileList" && files.length > 0 && (
        <ul class="space-y-2">
          {files.map((file) => (
            <li>
              {file.file && (
                <>
                  {/* <h2 class="font-[Geologica] text-2xl">
                      <PortableText value={file.title} />
                    </h2> */}
                  <h2 class="font-[Geologica] text-2xl">
                    {file.title ? file.title : ""}
                  </h2>
                  <a
                    download
                    href={file.url}
                    target="_blank"
                    class="text-blue-600 hover:underline"
                  >
                    ({file.fileName})
                  </a>
                </>
              )}
            </li>
          ))}
        </ul>
      )
    }
    {
      paragraphs && (
        <ul class="space-y-2">
          {paragraphs.map((paragraphObj, index) => (
            <li>
              {paragraphObj.paragraph && (
                <p>
                  {paragraphObj.paragraph.split("\n").map((line, i) => (
                    <>
                      {line}
                      <br />
                    </>
                  ))}
                </p>
              )}
            </li>
          ))}
        </ul>
      )
    }
  </div>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      document.querySelectorAll("a[download]").forEach(function (link) {
        link.addEventListener("click", function (event) {
          event.preventDefault();
          const href = this.getAttribute("href");
          const filename = this.getAttribute("download");
          const xhr = new XMLHttpRequest();
          xhr.open("GET", href, true);
          xhr.responseType = "blob";
          xhr.onload = function () {
            const blob = xhr.response;
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
          };
          xhr.send();
        });
      });
    });
  </script>
</Layout>
